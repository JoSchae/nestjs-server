{
	"info": {
		"name": "Permission API",
		"description": "Permission management endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "permissionId",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Create Permission",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"template:create\",\n  \"description\": \"Create template configurations\",\n  \"action\": \"create\",\n  \"resource\": \"config\",\n  \"isActive\": true\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/permissions",
					"host": ["{{baseUrl}}"],
					"path": ["permissions"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 201) {",
							"    const response = pm.response.json();",
							"    pm.collectionVariables.set('permissionId', response._id);",
							"    pm.test('Permission created successfully', function () {",
							"        pm.expect(response.name).to.eql('template:create');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Get All Permissions",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/permissions",
					"host": ["{{baseUrl}}"],
					"path": ["permissions"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is array', function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"pm.test('Contains default permissions', function () {",
							"    const permissions = pm.response.json();",
							"    const permissionNames = permissions.map(perm => perm.name);",
							"    pm.expect(permissionNames).to.include.members(['config:create', 'config:read', 'user:create']);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Get Permission by ID",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/permissions/{{permissionId}}",
					"host": ["{{baseUrl}}"],
					"path": ["permissions", "{{permissionId}}"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Permission has required fields', function () {",
							"    const permission = pm.response.json();",
							"    pm.expect(permission).to.have.property('name');",
							"    pm.expect(permission).to.have.property('action');",
							"    pm.expect(permission).to.have.property('resource');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Find Permission by Action and Resource",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/permissions/find/create/config",
					"host": ["{{baseUrl}}"],
					"path": ["permissions", "find", "create", "config"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Permission found', function () {",
							"    const permission = pm.response.json();",
							"    pm.expect(permission.action).to.eql('create');",
							"    pm.expect(permission.resource).to.eql('config');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Update Permission",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"description\": \"Updated: Create template configurations with validation\",\n  \"isActive\": true\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/permissions/{{permissionId}}",
					"host": ["{{baseUrl}}"],
					"path": ["permissions", "{{permissionId}}"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Permission updated', function () {",
							"    const permission = pm.response.json();",
							"    pm.expect(permission.description).to.include('Updated:');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Delete Permission",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/permissions/{{permissionId}}",
					"host": ["{{baseUrl}}"],
					"path": ["permissions", "{{permissionId}}"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		}
	]
}
