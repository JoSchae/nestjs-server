{
	"info": {
		"name": "Role API",
		"description": "Role management endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "roleId",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Create Role",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"project_manager\",\n  \"description\": \"Project manager with config and user read access\",\n  \"permissions\": [\n    \"507f1f77bcf86cd799439011\",\n    \"507f1f77bcf86cd799439012\"\n  ],\n  \"isActive\": true\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/roles",
					"host": ["{{baseUrl}}"],
					"path": ["roles"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 201) {",
							"    const response = pm.response.json();",
							"    pm.collectionVariables.set('roleId', response._id);",
							"    pm.test('Role created successfully', function () {",
							"        pm.expect(response.name).to.eql('project_manager');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Get All Roles",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/roles",
					"host": ["{{baseUrl}}"],
					"path": ["roles"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Response is array', function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"pm.test('Contains default roles', function () {",
							"    const roles = pm.response.json();",
							"    const roleNames = roles.map(role => role.name);",
							"    pm.expect(roleNames).to.include.members(['super_admin', 'admin', 'company_super_user']);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Get Role by ID",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/roles/{{roleId}}",
					"host": ["{{baseUrl}}"],
					"path": ["roles", "{{roleId}}"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Role has required fields', function () {",
							"    const role = pm.response.json();",
							"    pm.expect(role).to.have.property('name');",
							"    pm.expect(role).to.have.property('description');",
							"    pm.expect(role).to.have.property('permissions');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Update Role",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"description\": \"Updated: Project manager with enhanced config access\",\n  \"isActive\": true\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/roles/{{roleId}}",
					"host": ["{{baseUrl}}"],
					"path": ["roles", "{{roleId}}"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test('Role updated', function () {",
							"    const role = pm.response.json();",
							"    pm.expect(role.description).to.include('Updated:');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "Delete Role",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/roles/{{roleId}}",
					"host": ["{{baseUrl}}"],
					"path": ["roles", "{{roleId}}"]
				}
			},
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		}
	]
}
