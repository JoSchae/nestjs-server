{
	"info": {
		"name": "NestJS Server - Full Test Suite",
		"description": "Complete test suite for running all API endpoints in logical order",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "roleId",
			"value": "",
			"type": "string"
		},
		{
			"key": "permissionId",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "1. Setup & Health Check",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health",
							"host": ["{{baseUrl}}"],
							"path": ["health"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 5000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Service is healthy', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('status');",
									"    pm.expect(response.status).to.eql('ok');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Admin Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"superadmin@system.com\",\n  \"password\": \"SuperAdmin123!\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": ["{{baseUrl}}"],
							"path": ["auth", "login"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 5000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('token', response.access_token);",
									"    ",
									"    pm.test('Login successful', function () {",
									"        pm.expect(response.access_token).to.not.be.undefined;",
									"    });",
									"} else {",
									"    pm.test('Login failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([401, 404]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "2. Permission Tests",
			"item": [
				{
					"name": "Get All Permissions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/permissions",
							"host": ["{{baseUrl}}"],
							"path": ["permissions"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 5000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test('Permissions endpoint should work for superadmin', function () {",
									"    if (pm.response.code === 200) {",
									"        const response = pm.response.json();",
									"        pm.test('Permissions retrieved successfully', function () {",
									"            pm.expect(response).to.be.an('array');",
									"        });",
									"    } else if (pm.response.code === 403) {",
									"        pm.test('ERROR: Superadmin should have access but got 403 - Check role permissions', function () {",
									"            const errorResponse = pm.response.json();",
									"            console.log('403 Error Details:', errorResponse);",
									"            // This is failing - superadmin should have all:manage permission",
									"            pm.expect.fail('Superadmin user should have access to permissions endpoint. Check if super_admin role has all:manage permission.');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "3. Role Tests",
			"item": [
				{
					"name": "Get All Roles",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/roles",
							"host": ["{{baseUrl}}"],
							"path": ["roles"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 5000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test('Roles endpoint should work for superadmin', function () {",
									"    if (pm.response.code === 200) {",
									"        const response = pm.response.json();",
									"        pm.test('Roles retrieved successfully', function () {",
									"            pm.expect(response).to.be.an('array');",
									"        });",
									"    } else if (pm.response.code === 403) {",
									"        pm.test('ERROR: Superadmin should have access but got 403 - Check role permissions', function () {",
									"            const errorResponse = pm.response.json();",
									"            console.log('403 Error Details:', errorResponse);",
									"            // This is failing - superadmin should have all:manage permission",
									"            pm.expect.fail('Superadmin user should have access to roles endpoint. Check if super_admin role has all:manage permission.');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "4. User Tests",
			"item": [
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/all",
							"host": ["{{baseUrl}}"],
							"path": ["user", "all"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 5000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"pm.test('Users endpoint should work for superadmin', function () {",
									"    if (pm.response.code === 200) {",
									"        const response = pm.response.json();",
									"        pm.test('Users retrieved successfully', function () {",
									"            pm.expect(response).to.be.an('array');",
									"        });",
									"    } else if (pm.response.code === 403) {",
									"        pm.test('ERROR: Superadmin should have access but got 403 - Check role permissions', function () {",
									"            const errorResponse = pm.response.json();",
									"            console.log('403 Error Details:', errorResponse);",
									"            // This is failing - superadmin should have all:manage permission",
									"            pm.expect.fail('Superadmin user should have access to users endpoint. Check if super_admin role has all:manage permission.');",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get User Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/profile",
							"host": ["{{baseUrl}}"],
							"path": ["user", "profile"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response time is less than 5000ms', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Profile retrieved successfully', function () {",
									"        pm.expect(response).to.have.property('email');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		}
	]
}
